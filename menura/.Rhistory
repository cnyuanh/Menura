# Plot
p <- ggplot(df, aes(x = ntips, y = est)) +
geom_violin(trim = FALSE, bw = 1, fill = "white") + geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
#geom_jitter(position = position_dodge(1)) +
geom_jitter(position = "jitter", size = 1) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = "jitter")
p
# Plot
p <- ggplot(df, aes(x = ntips, y = est)) +
geom_violin(trim = FALSE, bw = 1, fill = "white") + geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
#geom_jitter(position = position_dodge(1)) +
geom_point(position = "jitter", size = 1) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = "jitter")
p
# Plot
p <- ggplot(df, aes(x = ntips, y = est)) +
geom_violin(trim = FALSE, bw = 1, fill = "white") + geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
#geom_jitter(position = position_dodge(1)) +
#geom_point(position = "jitter", size = 1) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = position_dodge(0.3)) +
geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.5, binwidth = 0.7, fill = "grey", position = position_dodge(width = 0.3))
p
# Plot
p <- ggplot(df, aes(x = ntips, y = est)) +
geom_violin(trim = FALSE, bw = 1, fill = "white") + geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
#geom_jitter(position = position_dodge(1)) +
#geom_point(position = "jitter", size = 1) +
geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.5, binwidth = 0.7, fill = "grey", position = position_dodge(width = 0.3)) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = position_dodge(0.3))
p
# Plot
p <- ggplot(df, aes(x = ntips, y = est)) +
geom_violin(trim = FALSE, bw = 1, fill = "white") +
geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
geom_jitter(position = position_dodge(0.3)) +
#geom_point(position = "jitter", size = 1) +
#geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.5, binwidth = 0.7, fill = "grey", position = position_dodge(width = 0.3)) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = position_dodge(0.3))
p
# Plot
p <- ggplot(df, aes(x = ntips, y = est)) +
geom_violin(trim = FALSE, bw = 1, fill = "white") +
geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
geom_jitter(position = position_dodge(0.3)) +
#geom_point(position = "jitter", size = 1) +
#geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.5, binwidth = 0.7, fill = "grey", position = position_dodge(width = 0.3)) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = position_dodge2(0.3))
p
# Plot
p <- ggplot(df, aes(x = ntips, y = est)) +
geom_violin(trim = FALSE, bw = 1, fill = "white") +
geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
#geom_jitter(position = position_dodge(0.3)) +
geom_point(position = position_jitterdodge(), size = 1) +
#geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.5, binwidth = 0.7, fill = "grey", position = position_dodge(width = 0.3)) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = position_jitterdodge())
p
# Plot
p <- ggplot(df, aes(x = ntips, y = est)) +
geom_violin(trim = FALSE, bw = 1, fill = "white") +
geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
#geom_jitter(position = position_dodge(0.3)) +
geom_point(position = position_jitterdodge(seed = 3), size = 1) +
#geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.5, binwidth = 0.7, fill = "grey", position = position_dodge(width = 0.3)) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = position_jitterdodge(seed = 3))
p
# Plot
p <- ggplot(df, aes(x = ntips, y = est)) +
geom_violin(trim = FALSE, bw = 1, fill = "white") +
geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
#geom_jitter(position = position_dodge(0.3)) +
geom_point(position = position_jitterdodge(jitter.width = NULL, jitter.height = 0, dodge.width = 0.75, seed = 3), size = 1) +
#geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.5, binwidth = 0.7, fill = "grey", position = position_dodge(width = 0.3)) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = position_jitterdodge(jitter.width = NULL, jitter.height = 0, dodge.width = 0.75, seed = 3))
p
# Plot
p <- ggplot(df, aes(x = ntips, y = est)) +
geom_violin(trim = FALSE, bw = 1, fill = "white") +
geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
#geom_jitter(position = position_dodge(0.3)) +
geom_point(inherit.aes = TRUE, position = position_jitterdodge(jitter.width = NULL, jitter.height = 0, dodge.width = 0.75, seed = 3), size = 1) +
#geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.5, binwidth = 0.7, fill = "grey", position = position_dodge(width = 0.3)) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = position_jitterdodge(jitter.width = NULL, jitter.height = 0, dodge.width = 0.75, seed = 3))
p
# Plot
p <- ggplot(df, aes(x = ntips, y = est), fill = "black") +
geom_violin(trim = FALSE, bw = 1, fill = "white") +
geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
#geom_jitter(position = position_dodge(0.3)) +
geom_point(inherit.aes = TRUE, position = position_jitterdodge(jitter.width = NULL, jitter.height = 0, dodge.width = 0.75, seed = 3), size = 1) +
#geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.5, binwidth = 0.7, fill = "grey", position = position_dodge(width = 0.3)) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = position_jitterdodge(jitter.width = NULL, jitter.height = 0, dodge.width = 0.75, seed = 3))
p
# Plot
p <- ggplot(df, aes(x = ntips, y = est), fill = "black") +
geom_violin(trim = FALSE, bw = 1, fill = "white") +
geom_hline(yintercept = 10, color = "black") + theme_classic() +
labs(title = "Estimate alpha, True alpha = 10, Model = CIR", x = "Number of tips", y = "Estimated alpha") +
#geom_jitter(position = position_dodge(0.3)) +
geom_point(shape = 21, position = position_jitterdodge(jitter.width = NULL, jitter.height = 0, dodge.width = 0.75, seed = 3), size = 1) +
#geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.5, binwidth = 0.7, fill = "grey", position = position_dodge(width = 0.3)) +
geom_errorbar(data = df, mapping = aes(x = ntips, ymin = (df$est - df$se), ymax = (df$est + df$se)), width = 0.05, color = "black", position = position_jitterdodge(jitter.width = NULL, jitter.height = 0, dodge.width = 0.75, seed = 3))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
s
summary(out$mcmctrace[100000:200000])
d <- c(10,10,10,10)
summary(d)
sd(d)
p1 <- readJPEG(system.file("img", "~/Desktop/menura_runs/CIR/alpha/alpha_1/estalpha_1_CIRx.jpg", package="jpeg"))
p2 <- readJPEG(system.file("img", "~/Desktop/menura_runs/CIR/alpha/alpha_0.5/estalpha_0.5_CIRx.jpg", package="jpeg"))
p3 <- multiplot(p1,p2)
library("jpeg", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
p1 <- readJPEG(system.file("img", "~/Desktop/menura_runs/CIR/alpha/alpha_1/estalpha_1_CIRx.jpg", package="jpeg"))
p2 <- readJPEG(system.file("img", "~/Desktop/menura_runs/CIR/alpha/alpha_0.5/estalpha_0.5_CIRx.jpg", package="jpeg"))
p3 <- multiplot(p1,p2)
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
p1 <- readJPEG(system.file("img", "~/Desktop/menura_runs/CIR/alpha/alpha_1/estalpha_1_CIRx.jpg", package="jpeg"))
p2 <- readJPEG(system.file("img", "~/Desktop/menura_runs/CIR/alpha/alpha_0.5/estalpha_0.5_CIRx.jpg", package="jpeg"))
p3 <- multiplot(p1,p2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p1 <- readJPEG(system.file("img", "~/Desktop/menura_runs/CIR/alpha/alpha_1/estalpha_1_CIRx.jpg", package="jpeg"))
p2 <- readJPEG(system.file("img", "~/Desktop/menura_runs/CIR/alpha/alpha_0.5/estalpha_0.5_CIRx.jpg", package="jpeg"))
p3 <- multiplot(p1,p2)
p1 <- readJPEG(system.file("img", "~/Desktop/menura_runs/CIR/alpha/alpha_1/estalpha_1_CIRx.jpeg", package="jpeg"))
p2 <- readJPEG(system.file("img", "~/Desktop/menura_runs/CIR/alpha/alpha_0.5/estalpha_0.5_CIRx.jpeg", package="jpeg"))
p3 <- multiplot(p1,p2)
p1 <- readJPEG(system.file("img", "~/Desktop/menura_runs/CIR/alpha/alpha_1/estalpha_1_CIRx.jpeg", package="jpeg"))
library("menura", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
#!/usr/bin/env Rscript
rm(list=ls())
library("doSNOW")
library(ape)
cl <- makeCluster(3)
registerDoSNOW(cl)
# Number of tips
ntips <- 32
# SDE parameters
true.alpha <- 0.5
true.mu <- 0.6
true.sigma <- 1
rt.value <- true.mu
iters <- 200000
# Generate tip values
priors <- list(
alpha = list (df =  function(x, a=2, b=1, log_scale=TRUE) {
dgamma(x, shape=a, rate=b, log=log_scale)},
rf = function(n, a=2, b=1) {
rgamma(n, shape=a, rate=b)} ),
mu = list (df = function(x, a=0, b=10, log_scale=TRUE) {
dnorm(x, mean=a, sd=b, log=log_scale)},
rf = function(n, a=0, b=20) {
rnorm(n, mean=a, sd=b)}),
sigma = list (df = function(x, a=2, b=1, log_scale=TRUE) {
dgamma(x, shape=a, rate=b, log=log_scale) },
rf = function(n, a=0.1, b=225) {
rgamma(n, shape=a, rate=b)}))
proposals = list(
alpha = list (df = function(n, alpha, gamma=0.5, log_scale=TRUE) {
dlnorm(n, meanlog=log(alpha), sdlog=gamma, log=log_scale)},
rf = function(n, alpha, gamma=0.5) {
rlnorm(n, meanlog=log(alpha), sdlog=gamma)}),
mu = list (df = function(n, mu, gamma=0.5, log_scale=TRUE) {
dnorm(n, mean=mu, sd=gamma, log=log_scale)},
rf = function(n, mu, gamma=0.5) {
rnorm(n, mean=mu, sd=gamma)}),
sigma = list(df = function(n, sigma, gamma=0.5, log_scale=TRUE) {
dlnorm(n, meanlog=log(sigma), sdlog=gamma, log=log_scale) },
rf = function(n, sigma, gamma=0.5) {
rlnorm(n, meanlog=log(sigma), sdlog=gamma)}))
dir.name <- paste("estalpha_", true.alpha, "_sigma_", true.sigma, "_ntips_",
as.character(ntips),"_Beta", sep="")
dir.create(dir.name)
tr <-  compute.brlen (stree(n=ntips, type="balanced"))
zz <- foreach (j = 1:30) %dopar% {
rpkgs <- c("sde", "ape", "msm", "menura")
sapply(rpkgs, require, character.only = TRUE)
#tipdata <- rTraitCont(tr, "OU", sigma=true.sigma, alpha=true.alpha,
# theta=true.mu, root.value=rt.value)
tipdata <- phyloSDE(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, epsilon = true.sigma,
model = "Beta", method = "euler")
out <- fit_model(tr=tr, tipdata=tipdata, rt.value=rt.value, iters=iters,
priors=priors, proposals=proposals,
model = "Beta", N=20, updateMethod = "subtree",
mu=true.mu, sigma = true.sigma)
save (file=paste(dir.name, "/seed", j, ".RData", sep=""), j, out, tr,
tipdata, rt.value, ntips, true.alpha, true.mu, true.sigma, rt.value)
rm(out)
}
zz <- foreach (j = 1:30) %dopar% {
rpkgs <- c("sde", "ape", "msm", "menura")
sapply(rpkgs, require, character.only = TRUE)
#tipdata <- rTraitCont(tr, "OU", sigma=true.sigma, alpha=true.alpha,
# theta=true.mu, root.value=rt.value)
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, epsilon = true.sigma,
model = "Beta", method = "euler")
out <- fit_model(tr=tr, tipdata=tipdata, rt.value=rt.value, iters=iters,
priors=priors, proposals=proposals,
model = "Beta", N=20, updateMethod = "subtree",
mu=true.mu, sigma = true.sigma)
save (file=paste(dir.name, "/seed", j, ".RData", sep=""), j, out, tr,
tipdata, rt.value, ntips, true.alpha, true.mu, true.sigma, rt.value)
rm(out)
}
zz <- foreach (j = 1:30) %dopar% {
rpkgs <- c("sde", "ape", "msm", "menura")
sapply(rpkgs, require, character.only = TRUE)
#tipdata <- rTraitCont(tr, "OU", sigma=true.sigma, alpha=true.alpha,
# theta=true.mu, root.value=rt.value)
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, theta = true.sigma,
model = "Beta", method = "euler")
out <- fit_model(tr=tr, tipdata=tipdata, rt.value=rt.value, iters=iters,
priors=priors, proposals=proposals,
model = "Beta", N=20, updateMethod = "subtree",
mu=true.mu, sigma = true.sigma)
save (file=paste(dir.name, "/seed", j, ".RData", sep=""), j, out, tr,
tipdata, rt.value, ntips, true.alpha, true.mu, true.sigma, rt.value)
rm(out)
}
zz <- foreach (j = 1:30) %dopar% {
rpkgs <- c("sde", "ape", "msm", "menura")
sapply(rpkgs, require, character.only = TRUE)
tipdata <- rTraitCont(tr, "OU", sigma=true.sigma, alpha=true.alpha,
theta=true.mu, root.value=rt.value)
# tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, theta = true.sigma,
model = "Beta", method = "euler")
out <- fit_model(tr=tr, tipdata=tipdata, rt.value=rt.value, iters=iters,
priors=priors, proposals=proposals,
model = "Beta", N=20, updateMethod = "subtree",
mu=true.mu, sigma = true.sigma)
save (file=paste(dir.name, "/seed", j, ".RData", sep=""), j, out, tr,
tipdata, rt.value, ntips, true.alpha, true.mu, true.sigma, rt.value)
rm(out)
}
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, theta = true.sigma,
model = "Beta", method = "euler")
tipdata <- rTraitCont(tr, "OU", sigma=true.sigma, alpha=true.alpha,
# theta=true.mu, root.value=rt.value)
#tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, theta = true.sigma,
model = "Beta", method = "euler")
tipdata <- rTraitCont(tr, "OU", sigma=true.sigma, alpha=true.alpha,
# theta=true.mu, root.value=rt.value)
#tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, theta = true.sigma,
#                    model = "Beta", method = "euler")
out <- fit_model(tr=tr, tipdata=tipdata, rt.value=rt.value, iters=iters,
priors=priors, proposals=proposals,
model = "Beta", N=20, updateMethod = "subtree",
mu=true.mu, sigma = true.sigma)
save (file=paste(dir.name, "/seed", j, ".RData", sep=""), j, out, tr,
tipdata, rt.value, ntips, true.alpha, true.mu, true.sigma, rt.value)
rm(out)
}
close(pb)
stopCluster(cl)
tipdata <- rTraitCont(tr, "OU", sigma=true.sigma, alpha=true.alpha,
theta=true.mu, root.value=rt.value)
tipdata
tipdata <- rTraitCont(tr, "OU", sigma=true.sigma, alpha=true.alpha,
theta=true.mu, root.value=rt.value)
tipdata
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, theta = true.sigma,
model = "Beta", method = "euler")
#tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, theta = true.sigma,
#model = "Beta", method = "euler")
# Generates tipdata for CIR method
f_TrCir <- function(x, l){
x <- 1
l <- 0.1
rcCIR(n=1, Dt=l, x0=x, theta=c(true.alpha*true.mu, true.alpha, true.sigma))
}
t.tipdata <- rTraitCont(tr, f_TrCir, ancestor = FALSE, root.value = t.root.value)
t.tipdata <- rTraitCont(tr, f_TrCir, ancestor = FALSE, root.value = rt.value)
#tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, theta = true.sigma,
#model = "Beta", method = "euler")
# Generates tipdata for CIR method
f_TrCir <- function(x, l){
x <- 1
l <- 0.1
rcCIR(n=1, Dt=l, x0=x, theta=c(true.alpha*true.mu, true.alpha, true.sigma))
}
View(f_TrCir)
rpkgs <- c("sde", "ape", "msm", "menura")
sapply(rpkgs, require, character.only = TRUE)
#tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, theta = true.sigma,
#model = "Beta", method = "euler")
# Generates tipdata for CIR method
f_TrCir <- function(x, l){
x <- 1
l <- 0.1
rcCIR(n=1, Dt=l, x0=x, theta=c(true.alpha*true.mu, true.alpha, true.sigma))
}
tipdata <- rTraitCont(tr, f_TrCir, ancestor = FALSE, root.value = rt.value)
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, alpha = true.alpha, mu = true.mu, theta = true.sigma,
model = "Beta", method = "euler")
# Number of tips
ntips <- 32
# SDE parameters
true.alpha <- 0.5
true.mu <- 0.6
true.sigma <- 1
theta = c(true.alpha, true.mu, true.sigma)
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, theta = theta,
model = "Beta", method = "euler")
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, theta = theta,
model = "Beta", method = "euler")
#!/usr/bin/env Rscript
rm(list=ls())
# Number of tips
ntips <- 32
# SDE parameters
true.alpha <- 0.5
true.mu <- 0.6
true.sigma <- 1
theta = c(true.alpha, true.mu, true.sigma)
theta = matrix(c(true.alpha, true.mu, true.sigma), nrow = 1, ncol = 3))
theta = matrix(c(true.alpha, true.mu, true.sigma), nrow = 1, ncol = 3)
rt.value <- true.mu
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, theta = theta,
model = "Beta", method = "euler")
tr <-  compute.brlen (stree(n=ntips, type="balanced"))
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, theta = theta,
model = "Beta", method = "euler")
tracebakc()
traceback()
traceback
tr$edge
theta = matrix(c(true.alpha, true.mu, true.sigma), nrow = 62, ncol = 3)
theta
cbind(rep(theta[,1],times=62),rep(theta[,2],times=62), rep(theta[,3],times = 62))
theta = matrix(c(true.alpha, true.mu, true.sigma), nrow = 1, ncol = 3)
cbind(rep(theta[,1],times=62),rep(theta[,2],times=62), rep(theta[,3],times = 62))
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, theta = theta,
model = "Beta", method = "euler")
#these parameters are vectors with size = number of edges = number of simulations
alpha <- mu <- sigma <- rep(0, Nedges)
#numeric vector of selective constraint strength for ec. branch
alpha[1:Nedges]  <- 0.5
Nedges <- length(tr$edge.length)
#these parameters are vectors with size = number of edges = number of simulations
alpha <- mu <- sigma <- rep(0, Nedges)
#numeric vector of selective constraint strength for ec. branch
alpha[1:Nedges]  <- 0.5
#mu == theta as per method description
#represents numeric vector giving ec. branch optimum
mu[1:Nedges] <- 0
#numeric vector Std-dev of random component for ec. branch
sigma[1:Nedges] <- 1
theta <- cbind(alpha=alpha, mu=mu, sigma=sigma)
#mu == theta as per method description
#represents numeric vector giving ec. branch optimum
mu[1:Nedges] <- 0.6
#numeric vector Std-dev of random component for ec. branch
sigma[1:Nedges] <- 1
theta <- cbind(alpha=alpha, mu=mu, sigma=sigma)
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, theta = theta,
model = "Beta", method = "euler")
tipdata <- phylo_sde(tr = tr, rt.value = rt.value, N=20, theta = theta,
model = "Beta", method = "euler")
tipdata <- rTraitCont(tr, "OU", sigma=true.sigma, alpha=true.alpha,
theta=true.mu, root.value=rt.value)
#!/usr/bin/env Rscript
rm(list=ls())
library("doSNOW")
library(ape)
cl <- makeCluster(3)
registerDoSNOW(cl)
# Number of tips
ntips <- 32
# SDE parameters
true.alpha <- 0.5
true.mu <- 0.6
true.sigma <- 1
rt.value <- true.mu
tr <-  compute.brlen (stree(n=ntips, type="balanced"))
source("~/Documents/simulate.R")
tipdata <- phyloSDE(tr, rt.value=rt.value, epsilon=true.sigma,
alpha=true.alpha, mu=true.mu, N=1000, model=model)
tipdata <- phyloSDE(tr, rt.value=rt.value, epsilon=true.sigma,
alpha=true.alpha, mu=true.mu, N=1000, model= "Beta")
true.sigma <- 0.5
tipdata <- phyloSDE(tr, rt.value=rt.value, epsilon=true.sigma,
alpha=true.alpha, mu=true.mu, N=1000, model= "Beta")
tipdata
#!/usr/bin/env Rscript
rm(list=ls())
library("doSNOW")
library(ape)
cl <- makeCluster(3)
registerDoSNOW(cl)
# Number of tips
ntips <- 32
# SDE parameters
true.alpha <- 17
true.mu <- 0.6
true.sigma <- 1
rt.value <- true.mu
source("~/Documents/simulate.R")
tipdata <- phyloSDE(tr, rt.value=rt.value, epsilon=true.sigma,
alpha=true.alpha, mu=true.mu, N=1000, model= "Beta")
tr <-  compute.brlen (stree(n=ntips, type="balanced"))
tipdata <- phyloSDE(tr, rt.value=rt.value, epsilon=true.sigma,
alpha=true.alpha, mu=true.mu, N=1000, model= "Beta")
tipdata
library(coda)
load("/home/cheyennem/Desktop/menura_runs/Beta/alpha/alpha_0.5/estalpha_0.5_sigma_0.5_ntips_32_Beta/seed1.RData")
plot(out$mcmctrace)
load("/home/cheyennem/Desktop/menura_runs/Beta/alpha/alpha_0.5/estalpha_0.5_sigma_0.5_ntips_32_Beta/seed3.RData")
plot(out$mcmctrace)
load("/home/cheyennem/Desktop/menura_runs/Beta/alpha/alpha_0.5/estalpha_0.5_sigma_0.5_ntips_32_Beta/seed4.RData")
#Plant sex ratio data
tipdata <- c(0.5,0.56,0.56,0.6,0.53,0.75,0.5,0.55,0.65,0.63,0.63,0.22,0.5,0.6,
0.37,0.48,0.5,0.82,0.94,0.8,0.74,0.79,0.39,0.67,0.55,0.58,0.66,
0.48,0.49,0.47,0.49,0.4,0.56,0.48,0.71,0.52,0.5,0.4,0.51,0.47,0.7,
0.67,0.53,0.48,0.54,0.48,0.55,0.55,0.41,0.59,0.51,0.46,0.47,0.56,
0.59,0.6,0.49,0.5,0.71,0.55,0.31,0.68,0.63,0.59,0.46,0.51,0.29,
0.46,0.69,0.53,0.6,0.68,0.5,0.49,0.63,0.56,0.53,0.53,0.55,0.77,
0.76,0.93,0.71,0.66,0.68,0.26,0.49,0.6,0.51,0.57,0.51,0.5,0.55,
0.52,0.68,0.54,0.51,0.44,0.57,0.39,0.21,0.6,0.5,0.49,0.58,0.61,
0.29,0.1,0.62,0.43,0.56,0.69,0.56,0.72,0.58,0.52,0.6,0.38,0.72,
0.64,0.55,0.62,0.4,0.76,0,0.52,0.67,0.75,0.52,0.41,0.56,0.57,0.76,
0.48,0.49,0.59,0.63,0.4,0.5,0.61,0.54,0.59,0.29,0.57,0.53,0.57,
0.64,0.57,0.48,0.5,0.38,0.09,0.1,0.31,0.58,0.48,0.45,0.49,0.45,
0.57,0.66,0.55,0.41,0.47,0.73,0.67,0.54,0.61,0.49,0.56,0.19,0.27,
0.45,0.4,0.5,0.44,0.57,0.28,0.48,0.39,0.24,0.55,0.44,0.4,0.41,0.5,
0.57,0.18,0.25,0.28,0.48,0.35,0.48,0.48,0.41,0.25,0.41,0.48,0.34,
0.49,0.5,0.42,0.61,0.5,0.36,0.5,0.52,0.55,0.57,0.62,0.49,0.51,0.57
,0.5,0.67,0.59,0.47,0.53,0.5,0.52,0.57,0.54,0.54,0.85,0.56,0.58,0.55,
0.4,0.67,0.64,0.5,0.61,0.3,0.7,0.56,0.4,0.31,0.47,0.58,0.66,0.43)
hist(tipdata)
hist(tipdata, xlab = "sex ratios", main = "Histogram of Plant Sex Ratios")
hist(tipdata, xlab = "sex ratio", main = "Histogram of Plant Sex Ratios")
load("/home/cheyennem/Desktop/menura_runs/Beta/alpha/alpha_17/estalpha_17_sigma_1_ntips_64_Beta/seed2.RData")
library(coda)
plot(out$mcmctrace)
load("/home/cheyennem/Desktop/alpha_1_estsigma_CIR_longevity/good_runs/seed1.RData")
codamenu()
library(coda)
codamenu()
R.Version)
R.Version())
R.version
summary.mcmc(out$mcmctrace)
library(coda)
summary.mcmc(out$mcmctrace)
summary(out$mcmctrace)
traceplot(out$mcmctrace)
load("/home/cheyennem/Desktop/alpha_1_estsigma_CIR_longevity/good_runs/seed10.RData")
traceplot(out$mcmctrace)
load("/home/cheyennem/Desktop/alpha_1_estsigma_CIR_longevity/good_runs/seed7.RData")
traceplot(out$mcmctrace)
load("/home/cheyennem/Desktop/alpha_1_estsigma_CIR_longevity/bad_runs/seed9.RData")
traceplot(out$mcmctrace)
load("/home/cheyennem/Desktop/alpha_1_estsigma_CIR_longevity/bad_runs/seed5.RData")
traceplot(out$mcmctrace)
plot(out$mcmctrace)
load("/home/cheyennem/Desktop/menura_runs/CIR/alpha/alpha_0.5/estalpha_0.5_sigma_1_ntips_64_CIR/bad runs/seed28.RData")
traceplot(out$mcmctrace)
plot(out$mcmctrace)
load("/home/cheyennem/Desktop/menura_runs/CIR/alpha/alpha_0.5/estalpha_0.5_sigma_1_ntips_64_CIR/bad runs/seed29.RData")
plot(out$mcmctrace)
traceplot(out$mcmctrace)
library(coda)
codamenua()
load("/home/cheyennem/Desktop/estalpha_sigma_0.5_sexratio_Beta/good_runs/seed2.RData")
codamenu()
setwd("~/Desktop/menura_package/menura")
devtools:check()
library(devtools)
devtools:check()
devtools::check()
setwd("~/menura_package/Menura/menura")
devtools::check()
devtools::check()
