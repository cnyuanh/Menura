# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
# model$dx_diffusion <- quote(0)
#
# tipdata  <- sqrt(t.tipdata)
# rt_value <- sqrt(t.root.value)
# set.seed(1)
# model.2 <- fit_model.default(fossils = fossils, tr=tr, tipdata=tipdata, rt_value=rt_value, iters=iters,
#                      model = model, alpha = 10,  mu = 15, sigma = NULL,
#                      N=240, init_method = "sim", update_method = "subtree")
#
# plot(model.2$mcmctrace)
## run the simulation and mcmc
set.seed(1)
model.1 <- fit_model.default(fossils = fossils, tr=tr, tipdata=t.tipdata, rt_value=t.root.value, iters=iters,
model = "CIR", alpha = 10,  mu = 5, sigma = NULL,
N=240, init_method = "sim", update_method = "subtree")
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
#clears environment
rm(list=ls())
mcmc_steps_else <- function(tr, tipdata, rt_value, lst, theta, model,
para2est, update_method, proposals, priors,
method, N = N, ...) {
loglike_curr <-  tree_logL(tr = tr, tipdata = tipdata, lst = lst,
alpha = theta[, "alpha"], mu = theta[, "mu"],
sigma = theta[, "sigma"],
model = model,
method = method)
loglike <- loglike_curr
q_ratio <- p_theta <- p_theta_star <- 0
theta_star <- theta
for (var in para2est) {
theta_star[, var] <- proposals[[var]]$rf(1, theta[, var][1])
p_theta <- p_theta +
priors[[var]]$df(theta[, var][1], log_scale = TRUE)
p_theta_star <- p_theta_star +
priors[[var]]$df(theta_star[, var][1], log_scale = TRUE)
q_ratio <- proposals[[var]]$df(theta[, var][1], theta_star[, var][1]) -
proposals[[var]]$df(theta_star[, var][1], theta[, var][1])
}
loglike_star <- tree_logL(tr = tr, tipdata = tipdata, lst = lst,
alpha = theta_star[, "alpha"],
mu = theta_star[, "mu"],
sigma = theta_star[, "sigma"],
model = model,
method = method)
accept_prob <- min(1,
exp(loglike_star + p_theta_star - loglike_curr -
p_theta + q_ratio))
accept <- runif(1)
n_para_accept <- 0
if (is.nan(accept_prob))
accept_prob <- 0
if (accept <= accept_prob) {
theta <- theta_star
n_para_accept <- 1
}
if (update_method == "tree") {
rlst <- update_tree(lst = lst, tr = tr, tipdata = tipdata,
rt_value = rt_value, model = model, theta = theta, N = N,
method = method,  mcmc_type = "fuchs")
lst <- rlst$lst
n_data_accept <- ifelse(rlst$data_accept > 0, 1, 0)
} else if (update_method == "subtree") {
rlst <- update_subtree(lst = lst, tr = tr, tipdata = tipdata,
rt_value = rt_value, model = model, theta = theta,
N = N, method = method,  mcmc_type = "fuchs")
lst <- rlst$lst
n_data_accept <- ifelse(rlst$data_accept > 0, 1, 0)
}
return(list(lst = lst, theta = theta, n_para_accept = n_para_accept,
n_data_accept = n_data_accept))
}
source('~/Documents/Menura/menura/R/mcmc_steps_else.R', echo=TRUE)
debugSource('~/Documents/Menura/menura/R/mcmc_steps_else.R', echo=TRUE)
source('~/Documents/test/test.R', echo=TRUE)
source('~/Documents/test/test.R', echo=TRUE)
debugSource('~/Documents/test/test.R', echo=TRUE)
source('~/Documents/test/test.R', echo=TRUE)
source('~/Documents/test/test.R', echo=TRUE)
debugSource('~/Documents/test/test.R', echo=TRUE)
install.packages("msm")
library("msm", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
source('~/Documents/test/test.R', echo=TRUE)
source('~/Documents/test/test.R', echo=TRUE)
setwd("~/Documents/Menura")
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
setwd("~/Documents/Menura")
# initialize functions
source("menura/R/fossil_id.R")
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
traceback
View(mcmc_steps_tanner_wong())
View(menura)
View(Menura)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
traceback()
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
ls()
fossils
lst
ls()
method
model
ls()
N
para2est
priors
proposals
ls()
rt_value
theta
tipdata
tr
update_method
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
ls()
loglike_curr
fossils
method
sigma
theta
model
debugSource('~/Documents/Menura/menura/R/fit_model.R', echo=TRUE)
debugSource('~/Documents/Menura/menura/R/fit_model.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
model
M$drift
model$drift
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
#clears environment
rm(list=ls())
#set working directory
setwd("/home/cheyennem/Documents/Menura/menura/R")
# initialize functions
source("fossil_id.R")
#clears environment
rm(list=ls())
#set working directory
setwd("/home/cheyennem/Documents/Menura/menura/R")
# initialize functions
source("fossil_id.R")
source("fit_model.R")
source("phylo_sde_0.R")
source("mcmc_steps_tanner_wong.R")
source("mcmc_steps_else.R")
source("tree_logL.R")
source("order_tree.R")
source("update_subtree.R")
source("update_tree.R")
source("sde_model.R")
source("igamma.R")
source("dc_fn.R")
source("back_transform.R")
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
model
model <- "OU"
class(model) == "character"
class(model) == "list"
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
model
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
#these parameters are vectors with size = number of edges = number of simulations
alpha <- mu <- sigma <- rep(0, Nedges)
#numeric vector of selective constraint strength for ec. branch
alpha[1:Nedges]  <- 0.1
#mu == theta as per method description
#represents numeric vector giving ec. branch optimum
mu[1:Nedges] <- 0
#numeric vector Std-dev of random component for ec. branch
sigma[1:Nedges] <- 7.666
rt_value <- 0
# rTraitCont simulates the evolution of a continuous character along a phylogeny
# OU specifies model type (Brownian, Orn-Uhl, fxn)
# model type OU is sensitive to sigma, alpha, theta
tipdata <- rTraitCont(ftr, "OU", sigma=sigma, alpha=alpha, theta=mu,
root.value=rt_value)
model <- list()
model$d <- function (t, x, theta) {
theta[1] * (theta[2] - x)
}
model$s <- function(t, x, theta) {
theta[3]
}
# quote() assigns an expression to a variable instead of the solution
model$drift <- quote(alpha * (mu - x))
model$diffusion <- quote(sigma)
# the derivative of diffusion = sigma = 0
model$dx_diffusion <- quote(0)
#theta is a vector of the parameters
theta <- cbind(alpha=alpha, mu=mu, sigma=sigma)
N <- 100
#calls the sde function
lst <- phylo_sde_0 (fossils = fossils, tr=ftr, rt_value=rt_value, theta=theta, model=model,
N=N, method="euler")
# rTraitCont simulates the evolution of a continuous character along a phylogeny
# OU specifies model type (Brownian, Orn-Uhl, fxn)
# model type OU is sensitive to sigma, alpha, theta
tipdata <- rTraitCont(tr, "OU", sigma=sigma, alpha=alpha, theta=mu,
root.value=rt_value)
#these parameters are vectors with size = number of edges = number of simulations
alpha <- mu <- sigma <- rep(0, Nedges)
#numeric vector of selective constraint strength for ec. branch
alpha[1:Nedges]  <- 0.1
#examples{
#set seed for random num generator to ensure simulation is reproducible
set.seed(1)
# install these packages
rpkgs <- c("sde", "ape", "msm")
lapply(rpkgs, require, character.only = TRUE)
# Random tree with n tips
tr <-  compute.brlen(rtree(n=4))
# plot the tree
plot(tr)
edgelabels()
nodelabels()
add.scale.bar()
tip <- list(edge = matrix(c(2,1),1,2),
tip.label = "fossil",
edge.length = 0.0,
Nnode = 1)
class(tip)<- "phylo"
ftr1 <- bind.tree(tr,tip, where = 4, position = 0.1)
plot(ftr1)
ftr <- ftr1
tip <- list(edge = matrix(c(2,1),1,2),
tip.label = "fossil",
edge.length = 0.0,
Nnode = 1)
class(tip)<- "phylo"
ftr1 <- bind.tree(ftr1,tip, where = 7, position = 0.1)
plot(ftr1)
# tip <- list(edge = matrix(c(2,1),1,2),
#             tip.label = "fossil",
#             edge.length = 0.0,
#             Nnode = 1)
# class(tip)<- "phylo"
#
# ftr <- bind.tree(ftr1,tip, where = 11, position = 0.1)
# #number of tips in the new tree
# ftr_tips <- Ntip(ftr)
#plot the tree
plot(ftr)
edgelabels()
nodelabels()
ftr <- ftr1
plot(ftr)
edgelabels()
nodelabels()
#takes in the tree with fossils and the original tree
#returns a vector of the nodes numbers that are fossils
fossils <- fossil_id(ftr)
fossils
# SDE parameters
# set to size of the length of the edge.length vector
Nedges <- length(ftr$edge.length)
dclade <- max(which(ftr$edge[,1] == ftr$edge[1,1])) - 1
#these parameters are vectors with size = number of edges = number of simulations
alpha <- mu <- sigma <- rep(0, Nedges)
#numeric vector of selective constraint strength for ec. branch
alpha[1:Nedges]  <- 0.1
#mu == theta as per method description
#represents numeric vector giving ec. branch optimum
mu[1:Nedges] <- 0
#numeric vector Std-dev of random component for ec. branch
sigma[1:Nedges] <- 7.666
rt_value <- 0
# rTraitCont simulates the evolution of a continuous character along a phylogeny
# OU specifies model type (Brownian, Orn-Uhl, fxn)
# model type OU is sensitive to sigma, alpha, theta
tipdata <- rTraitCont(ftr, "OU", sigma=sigma, alpha=alpha, theta=mu,
root.value=rt_value)
model <- list()
model$d <- function (t, x, theta) {
theta[1] * (theta[2] - x)
}
model$s <- function(t, x, theta) {
theta[3]
}
# quote() assigns an expression to a variable instead of the solution
model$drift <- quote(alpha * (mu - x))
model$diffusion <- quote(sigma)
# the derivative of diffusion = sigma = 0
model$dx_diffusion <- quote(0)
#theta is a vector of the parameters
theta <- cbind(alpha=alpha, mu=mu, sigma=sigma)
N <- 100
#calls the sde function
lst <- phylo_sde_0 (fossils = fossils, tr=ftr, rt_value=rt_value, theta=theta, model=model,
N=N, method="euler")
lst
#calls log likelihood using Euler, approximates for diffusion process in tree
loglike <-  tree_logL (fossils = fossils, tr=ftr, tipdata=tipdata, lst=lst,
alpha=theta[, "alpha"],
mu=theta[, "mu"],
sigma=theta[, "sigma"], model=model,
method = "euler")
loglike
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
ls
ls()
fossils
loglike_curr
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
ls()
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
ls()
fossils
alpha
model
mu
sigma
tipdata
model
source("tree_logL.R")
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
logL
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
logL
1\0
1/0
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
ftr
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
ftr
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
tr
tr
tr
tr
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
logL
loglike_curr
traceback()
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
q
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/mcmc_steps_tanner_wong.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
traceback()
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
source('~/Documents/Menura/menura/R/example_tree.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
logL
logL[1]=9
logL
tr$edge[, 2]
!(tr$edge[, 2] %in% fossils)
tr$edge[, 1] == 8
which((tr$edge[, 1] == 8) & !(tr$edge[, 2] %in% fossils))
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
source('~/Documents/Menura/menura/R/test.R', echo=TRUE)
tr$edge[which(tr$edge[, 1] == 9), 2]
tipdata[7]
tipdata[5]
daughters <- c(9, 6)
fossils <- c(6, 5)
daughters[which(daughters %in% fossils)]
edge <- 3
tr$edge[edge, 2]
